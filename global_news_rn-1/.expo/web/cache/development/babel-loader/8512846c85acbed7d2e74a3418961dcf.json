{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.attachListeners = attachListeners;\nexports.addNode = addNode;\nexports.removeNode = removeNode;\nexports.terminateResponder = terminateResponder;\nexports.getResponderNode = getResponderNode;\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n\nvar _createResponderEvent = _interopRequireDefault(require(\"./createResponderEvent\"));\n\nvar _ResponderEventTypes = require(\"./ResponderEventTypes\");\n\nvar _utils = require(\"./utils\");\n\nvar _ResponderTouchHistoryStore = _interopRequireDefault(require(\"./ResponderTouchHistoryStore\"));\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar emptyObject = {};\n\n\nvar startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\n  bubbles: true }];\n\nvar moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\n  bubbles: true }];\n\nvar scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\n  bubbles: false }];\n\nvar shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration };\n\nvar emptyResponder = {\n  id: null,\n  idPath: null,\n  node: null };\n\nvar responderListenersMap = new Map();\nvar isEmulatingMouseEvents = false;\nvar trackedTouchCount = 0;\nvar currentResponder = {\n  id: null,\n  node: null,\n  idPath: null };\n\n\nfunction changeCurrentResponder(responder) {\n  currentResponder = responder;\n}\n\nfunction getResponderConfig(id) {\n  var config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eventListener(domEvent) {\n  var eventType = domEvent.type;\n  var eventTarget = domEvent.target;\n\n\n\n\n\n\n\n\n  if (eventType === 'touchstart') {\n    isEmulatingMouseEvents = true;\n  }\n\n\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  }\n\n\n  if (\n  eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents ||\n  eventType === 'mousemove' && trackedTouchCount < 1) {\n    return;\n  }\n\n\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n\n    return;\n  }\n\n  var isStartEvent = (0, _ResponderEventTypes.isStartish)(eventType) && (0, _utils.isPrimaryPointerDown)(domEvent);\n  var isMoveEvent = (0, _ResponderEventTypes.isMoveish)(eventType);\n  var isEndEvent = (0, _ResponderEventTypes.isEndish)(eventType);\n  var isScrollEvent = (0, _ResponderEventTypes.isScroll)(eventType);\n  var isSelectionChangeEvent = (0, _ResponderEventTypes.isSelectionChange)(eventType);\n  var responderEvent = (0, _createResponderEvent.default)(domEvent);\n\n\n\n\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n\n    _ResponderTouchHistoryStore.default.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n\n\n\n\n\n  var eventPaths = (0, _utils.getResponderPaths)(domEvent);\n  var wasNegotiated = false;\n  var wantsResponder;\n\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n\n\n    var currentResponderIdPath = currentResponder.idPath;\n    var eventIdPath = eventPaths.idPath;\n\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      var lowestCommonAncestor = (0, _utils.getLowestCommonAncestor)(currentResponderIdPath, eventIdPath);\n\n      if (lowestCommonAncestor != null) {\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor);\n\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index) };\n\n      } else {\n        eventPaths = null;\n      }\n    }\n\n    if (eventPaths != null) {\n\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n\n      if (wantsResponder != null) {\n\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  }\n\n\n  if (currentResponder.id != null && currentResponder.node != null) {\n    var _currentResponder = currentResponder,\n    id = _currentResponder.id,\n    node = _currentResponder.node;\n\n    var _getResponderConfig = getResponderConfig(id),\n    onResponderStart = _getResponderConfig.onResponderStart,\n    onResponderMove = _getResponderConfig.onResponderMove,\n    onResponderEnd = _getResponderConfig.onResponderEnd,\n    onResponderRelease = _getResponderConfig.onResponderRelease,\n    onResponderTerminate = _getResponderConfig.onResponderTerminate,\n    onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node;\n\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n        onResponderStart(responderEvent);\n      }\n    } else\n    if (isMoveEvent) {\n      if (onResponderMove != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n        onResponderMove(responderEvent);\n      }\n    } else {\n      var isTerminateEvent = (0, _ResponderEventTypes.isCancelish)(eventType) ||\n      eventType === 'contextmenu' ||\n      eventType === 'blur' && eventTarget === window ||\n      eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node ||\n      isScrollEvent && trackedTouchCount === 0 ||\n      isScrollEvent && eventTarget.contains(node) && eventTarget !== node ||\n      isSelectionChangeEvent && (0, _utils.hasValidSelection)(domEvent);\n      var isReleaseEvent = isEndEvent && !isTerminateEvent && !(0, _utils.hasTargetTouches)(node, domEvent.touches);\n\n      if (isEndEvent) {\n        if (onResponderEnd != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n          onResponderEnd(responderEvent);\n        }\n      }\n\n\n      if (isReleaseEvent) {\n        if (onResponderRelease != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n          onResponderRelease(responderEvent);\n        }\n\n        changeCurrentResponder(emptyResponder);\n      }\n\n\n      if (isTerminateEvent) {\n        var shouldTerminate = true;\n\n        if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\n\n          if (wasNegotiated) {\n            shouldTerminate = false;\n          } else if (onResponderTerminationRequest != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n            if (onResponderTerminationRequest(responderEvent) === false) {\n              shouldTerminate = false;\n            }\n          }\n        }\n\n        if (shouldTerminate) {\n          if (onResponderTerminate != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n            onResponderTerminate(responderEvent);\n          }\n\n          changeCurrentResponder(emptyResponder);\n          isEmulatingMouseEvents = false;\n          trackedTouchCount = 0;\n        }\n      }\n    }\n  }\n}\n\n\n\n\n\n\n\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type];\n\n  if (shouldSetCallbacks != null) {\n    var idPath = eventPaths.idPath,\n    nodePath = eventPaths.nodePath;\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    var bubbles = shouldSetCallbacks[2].bubbles;\n\n    var check = function check(id, node, callbackName) {\n      var config = getResponderConfig(id);\n      var shouldSetCallback = config[callbackName];\n\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n\n        if (shouldSetCallback(responderEvent) === true) {\n\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return {\n            id: id,\n            node: node,\n            idPath: prunedIdPath };\n\n        }\n      }\n    };\n\n\n    for (var i = idPath.length - 1; i >= 0; i--) {\n      var id = idPath[i];\n      var node = nodePath[i];\n      var result = check(id, node, shouldSetCallbackCaptureName);\n\n      if (result != null) {\n        return result;\n      }\n\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    }\n\n\n    if (bubbles) {\n      for (var _i = 0; _i < idPath.length; _i++) {\n        var _id = idPath[_i];\n        var _node = nodePath[_i];\n\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\n\n        if (_result != null) {\n          return _result;\n        }\n\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      var _id2 = idPath[0];\n      var _node2 = nodePath[0];\n      var target = domEvent.target;\n\n      if (target === _node2) {\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\n\n\n\n\n\nfunction attemptTransfer(responderEvent, wantsResponder) {\n  var _currentResponder2 = currentResponder,\n  currentId = _currentResponder2.id,\n  currentNode = _currentResponder2.node;\n  var id = wantsResponder.id,\n  node = wantsResponder.node;\n\n  var _getResponderConfig2 = getResponderConfig(id),\n  onResponderGrant = _getResponderConfig2.onResponderGrant,\n  onResponderReject = _getResponderConfig2.onResponderReject;\n\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node;\n\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n      onResponderGrant(responderEvent);\n    }\n\n    changeCurrentResponder(wantsResponder);\n  } else\n  {\n    var _getResponderConfig3 = getResponderConfig(currentId),\n    onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n    onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n\n    var allowTransfer = true;\n\n    if (onResponderTerminationRequest != null) {\n      responderEvent.currentTarget = currentNode;\n      responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n      if (onResponderTerminationRequest(responderEvent) === false) {\n        allowTransfer = false;\n      }\n    }\n\n    if (allowTransfer) {\n\n      if (onResponderTerminate != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n        onResponderTerminate(responderEvent);\n      }\n\n\n      if (onResponderGrant != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n        onResponderGrant(responderEvent);\n      }\n\n      changeCurrentResponder(wantsResponder);\n    } else {\n\n      if (onResponderReject != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n        onResponderReject(responderEvent);\n      }\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\nvar documentEventsCapturePhase = ['blur', 'scroll'];\nvar documentEventsBubblePhase = [\n'mousedown', 'mousemove', 'mouseup', 'dragstart',\n'touchstart', 'touchmove', 'touchend', 'touchcancel',\n'contextmenu', 'select', 'selectionchange'];\n\nfunction attachListeners() {\n  if (_ExecutionEnvironment.canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener('blur', eventListener);\n    documentEventsBubblePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\n\n\n\n\n\nfunction addNode(id, node, config) {\n  (0, _utils.setResponderId)(node, id);\n  responderListenersMap.set(id, config);\n}\n\n\n\n\n\nfunction removeNode(id) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n\n  if (responderListenersMap.has(id)) {\n    responderListenersMap.delete(id);\n  }\n}\n\n\n\n\n\n\n\nfunction terminateResponder() {\n  var _currentResponder3 = currentResponder,\n  id = _currentResponder3.id,\n  node = _currentResponder3.node;\n\n  if (id != null && node != null) {\n    var _getResponderConfig4 = getResponderConfig(id),\n    onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n\n    if (onResponderTerminate != null) {\n      var event = (0, _createResponderEvent.default)({});\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n\n    changeCurrentResponder(emptyResponder);\n  }\n\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\n\n\n\n\n\n\nfunction getResponderNode() {\n  return currentResponder.node;\n}","map":{"version":3,"names":["exports","__esModule","attachListeners","addNode","removeNode","terminateResponder","getResponderNode","_ExecutionEnvironment","require","_createResponderEvent","_interopRequireDefault","_ResponderEventTypes","_utils","_ResponderTouchHistoryStore","obj","default","emptyObject","startRegistration","bubbles","moveRegistration","scrollRegistration","shouldSetResponderEvents","touchstart","mousedown","touchmove","mousemove","scroll","emptyResponder","id","idPath","node","responderListenersMap","Map","isEmulatingMouseEvents","trackedTouchCount","currentResponder","changeCurrentResponder","responder","getResponderConfig","config","get","eventListener","domEvent","eventType","type","eventTarget","target","isStartEvent","isStartish","isPrimaryPointerDown","isMoveEvent","isMoveish","isEndEvent","isEndish","isScrollEvent","isScroll","isSelectionChangeEvent","isSelectionChange","responderEvent","touches","length","recordTouchTrack","nativeEvent","eventPaths","getResponderPaths","wasNegotiated","wantsResponder","currentResponderIdPath","eventIdPath","lowestCommonAncestor","getLowestCommonAncestor","indexOfLowestCommonAncestor","indexOf","index","slice","nodePath","findWantsResponder","attemptTransfer","_currentResponder","_getResponderConfig","onResponderStart","onResponderMove","onResponderEnd","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","cancelable","currentTarget","dispatchConfig","registrationName","isTerminateEvent","isCancelish","window","contains","relatedTarget","hasValidSelection","isReleaseEvent","hasTargetTouches","shouldTerminate","shouldSetCallbacks","shouldSetCallbackCaptureName","shouldSetCallbackBubbleName","check","callbackName","shouldSetCallback","prunedIdPath","i","result","isPropagationStopped","_i","_id","_node","_result","_id2","_node2","_currentResponder2","currentId","currentNode","_getResponderConfig2","onResponderGrant","onResponderReject","_getResponderConfig3","allowTransfer","documentEventsCapturePhase","documentEventsBubblePhase","canUseDOM","__reactResponderSystemActive","addEventListener","forEach","document","setResponderId","set","has","delete","_currentResponder3","_getResponderConfig4","event"],"sources":["D:/workbridge/mProjects/GlobalNewsApp/global_news_rn/node_modules/react-native-web/dist/cjs/modules/useResponderEvents/ResponderSystem.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.attachListeners = attachListeners;\nexports.addNode = addNode;\nexports.removeNode = removeNode;\nexports.terminateResponder = terminateResponder;\nexports.getResponderNode = getResponderNode;\n\nvar _ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\");\n\nvar _createResponderEvent = _interopRequireDefault(require(\"./createResponderEvent\"));\n\nvar _ResponderEventTypes = require(\"./ResponderEventTypes\");\n\nvar _utils = require(\"./utils\");\n\nvar _ResponderTouchHistoryStore = _interopRequireDefault(require(\"./ResponderTouchHistoryStore\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * RESPONDER EVENT SYSTEM\n *\n * A single, global \"interaction lock\" on views. For a view to be the \"responder\" means\n * that pointer interactions are exclusive to that view and none other. The \"interaction\n * lock\" can be transferred (only) to ancestors of the current \"responder\" as long as\n * pointers continue to be active.\n *\n * Responder being granted:\n *\n * A view can become the \"responder\" after the following events:\n *  * \"pointerdown\" (implemented using \"touchstart\", \"mousedown\")\n *  * \"pointermove\" (implemented using \"touchmove\", \"mousemove\")\n *  * \"scroll\" (while a pointer is down)\n *  * \"selectionchange\" (while a pointer is down)\n *\n * If nothing is already the \"responder\", the event propagates to (capture) and from\n * (bubble) the event target until a view returns `true` for\n * `on*ShouldSetResponder(Capture)`.\n *\n * If something is already the responder, the event propagates to (capture) and from\n * (bubble) the lowest common ancestor of the event target and the current \"responder\".\n * Then negotiation happens between the current \"responder\" and a view that wants to\n * become the \"responder\": see the timing diagram below.\n *\n * (NOTE: Scrolled views either automatically become the \"responder\" or release the\n * \"interaction lock\". A native scroll view that isn't built on top of the responder\n * system must result in the current \"responder\" being notified that it no longer has\n * the \"interaction lock\" - the native system has taken over.\n *\n * Responder being released:\n *\n * As soon as there are no more active pointers that *started* inside descendants\n * of the *current* \"responder\", an `onResponderRelease` event is dispatched to the\n * current \"responder\", and the responder lock is released.\n *\n * Typical sequence of events:\n *  * startShouldSetResponder\n *  * responderGrant/Reject\n *  * responderStart\n *  * responderMove\n *  * responderEnd\n *  * responderRelease\n */\n\n/*                                             Negotiation Performed\n                                             +-----------------------+\n                                            /                         \\\nProcess low level events to    +     Current Responder      +   wantsResponderID\ndetermine who to perform negot-|   (if any exists at all)   |\niation/transition              | Otherwise just pass through|\n-------------------------------+----------------------------+------------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +--------------+          |                            |\n     | onTouchStart |          |                            |\n     +------+-------+    none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onStartShouldSetResponder|----->| onResponderStart (cur) |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | | onResponder            | |\n            +------------------->|    TerminationRequest  | |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | | onResponderTerminate   |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderStart|\n                               |                            | +----------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchMove |           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onMoveShouldSetResponder |----->| onResponderMove (cur)  |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderMove |\n                               |                            | +----------------+\n                               |                            |\n                               |                            |\n      Some active touch started|                            |\n      inside current responder | +------------------------+ |\n      +------------------------->|      onResponderEnd    | |\n      |                        | +------------------------+ |\n  +---+---------+              |                            |\n  | onTouchEnd  |              |                            |\n  +---+---------+              |                            |\n      |                        | +------------------------+ |\n      +------------------------->|     onResponderEnd     | |\n      No active touches started| +-----------+------------+ |\n      inside current responder |             |              |\n                               |             v              |\n                               | +------------------------+ |\n                               | |    onResponderRelease  | |\n                               | +------------------------+ |\n                               |                            |\n                               +                            + */\nvar emptyObject = {};\n/* ------------ IMPLEMENTATION ------------ */\n\nvar startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\n  bubbles: true\n}];\nvar moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\n  bubbles: true\n}];\nvar scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\n  bubbles: false\n}];\nvar shouldSetResponderEvents = {\n  touchstart: startRegistration,\n  mousedown: startRegistration,\n  touchmove: moveRegistration,\n  mousemove: moveRegistration,\n  scroll: scrollRegistration\n};\nvar emptyResponder = {\n  id: null,\n  idPath: null,\n  node: null\n};\nvar responderListenersMap = new Map();\nvar isEmulatingMouseEvents = false;\nvar trackedTouchCount = 0;\nvar currentResponder = {\n  id: null,\n  node: null,\n  idPath: null\n};\n\nfunction changeCurrentResponder(responder) {\n  currentResponder = responder;\n}\n\nfunction getResponderConfig(id) {\n  var config = responderListenersMap.get(id);\n  return config != null ? config : emptyObject;\n}\n/**\n * Process native events\n *\n * A single event listener is used to manage the responder system.\n * All pointers are tracked in the ResponderTouchHistoryStore. Native events\n * are interpreted in terms of the Responder System and checked to see if\n * the responder should be transferred. Each host node that is attached to\n * the Responder System has an ID, which is used to look up its associated\n * callbacks.\n */\n\n\nfunction eventListener(domEvent) {\n  var eventType = domEvent.type;\n  var eventTarget = domEvent.target;\n  /**\n   * Manage emulated events and early bailout.\n   * Since PointerEvent is not used yet (lack of support in older Safari), it's\n   * necessary to manually manage the mess of browser touch/mouse events.\n   * And bailout early for termination events when there is no active responder.\n   */\n  // Flag when browser may produce emulated events\n\n  if (eventType === 'touchstart') {\n    isEmulatingMouseEvents = true;\n  } // Remove flag when browser will not produce emulated events\n\n\n  if (eventType === 'touchmove' || trackedTouchCount > 1) {\n    isEmulatingMouseEvents = false;\n  } // Ignore various events in particular circumstances\n\n\n  if ( // Ignore browser emulated mouse events\n  eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents || // Ignore mousemove if a mousedown didn't occur first\n  eventType === 'mousemove' && trackedTouchCount < 1) {\n    return;\n  } // Remove flag after emulated events are finished\n\n\n  if (isEmulatingMouseEvents && eventType === 'mouseup') {\n    if (trackedTouchCount === 0) {\n      isEmulatingMouseEvents = false;\n    }\n\n    return;\n  }\n\n  var isStartEvent = (0, _ResponderEventTypes.isStartish)(eventType) && (0, _utils.isPrimaryPointerDown)(domEvent);\n  var isMoveEvent = (0, _ResponderEventTypes.isMoveish)(eventType);\n  var isEndEvent = (0, _ResponderEventTypes.isEndish)(eventType);\n  var isScrollEvent = (0, _ResponderEventTypes.isScroll)(eventType);\n  var isSelectionChangeEvent = (0, _ResponderEventTypes.isSelectionChange)(eventType);\n  var responderEvent = (0, _createResponderEvent.default)(domEvent);\n  /**\n   * Record the state of active pointers\n   */\n\n  if (isStartEvent || isMoveEvent || isEndEvent) {\n    if (domEvent.touches) {\n      trackedTouchCount = domEvent.touches.length;\n    } else {\n      if (isStartEvent) {\n        trackedTouchCount = 1;\n      } else if (isEndEvent) {\n        trackedTouchCount = 0;\n      }\n    }\n\n    _ResponderTouchHistoryStore.default.recordTouchTrack(eventType, responderEvent.nativeEvent);\n  }\n  /**\n   * Responder System logic\n   */\n\n\n  var eventPaths = (0, _utils.getResponderPaths)(domEvent);\n  var wasNegotiated = false;\n  var wantsResponder; // If an event occured that might change the current responder...\n\n  if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n    // If there is already a responder, prune the event paths to the lowest common ancestor\n    // of the existing responder and deepest target of the event.\n    var currentResponderIdPath = currentResponder.idPath;\n    var eventIdPath = eventPaths.idPath;\n\n    if (currentResponderIdPath != null && eventIdPath != null) {\n      var lowestCommonAncestor = (0, _utils.getLowestCommonAncestor)(currentResponderIdPath, eventIdPath);\n\n      if (lowestCommonAncestor != null) {\n        var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor); // Skip the current responder so it doesn't receive unexpected \"shouldSet\" events.\n\n        var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n        eventPaths = {\n          idPath: eventIdPath.slice(index),\n          nodePath: eventPaths.nodePath.slice(index)\n        };\n      } else {\n        eventPaths = null;\n      }\n    }\n\n    if (eventPaths != null) {\n      // If a node wants to become the responder, attempt to transfer.\n      wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n\n      if (wantsResponder != null) {\n        // Sets responder if none exists, or negotates with existing responder.\n        attemptTransfer(responderEvent, wantsResponder);\n        wasNegotiated = true;\n      }\n    }\n  } // If there is now a responder, invoke its callbacks for the lifecycle of the gesture.\n\n\n  if (currentResponder.id != null && currentResponder.node != null) {\n    var _currentResponder = currentResponder,\n        id = _currentResponder.id,\n        node = _currentResponder.node;\n\n    var _getResponderConfig = getResponderConfig(id),\n        onResponderStart = _getResponderConfig.onResponderStart,\n        onResponderMove = _getResponderConfig.onResponderMove,\n        onResponderEnd = _getResponderConfig.onResponderEnd,\n        onResponderRelease = _getResponderConfig.onResponderRelease,\n        onResponderTerminate = _getResponderConfig.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node; // Start\n\n    if (isStartEvent) {\n      if (onResponderStart != null) {\n        responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n        onResponderStart(responderEvent);\n      }\n    } // Move\n    else if (isMoveEvent) {\n        if (onResponderMove != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n          onResponderMove(responderEvent);\n        }\n      } else {\n        var isTerminateEvent = (0, _ResponderEventTypes.isCancelish)(eventType) || // native context menu\n        eventType === 'contextmenu' || // window blur\n        eventType === 'blur' && eventTarget === window || // responder (or ancestors) blur\n        eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node || // native scroll without using a pointer\n        isScrollEvent && trackedTouchCount === 0 || // native scroll on node that is parent of the responder (allow siblings to scroll)\n        isScrollEvent && eventTarget.contains(node) && eventTarget !== node || // native select/selectionchange on node\n        isSelectionChangeEvent && (0, _utils.hasValidSelection)(domEvent);\n        var isReleaseEvent = isEndEvent && !isTerminateEvent && !(0, _utils.hasTargetTouches)(node, domEvent.touches); // End\n\n        if (isEndEvent) {\n          if (onResponderEnd != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n            onResponderEnd(responderEvent);\n          }\n        } // Release\n\n\n        if (isReleaseEvent) {\n          if (onResponderRelease != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n            onResponderRelease(responderEvent);\n          }\n\n          changeCurrentResponder(emptyResponder);\n        } // Terminate\n\n\n        if (isTerminateEvent) {\n          var shouldTerminate = true; // Responders can still avoid termination but only for these events.\n\n          if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\n            // Only call this function is it wasn't already called during negotiation.\n            if (wasNegotiated) {\n              shouldTerminate = false;\n            } else if (onResponderTerminationRequest != null) {\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n              if (onResponderTerminationRequest(responderEvent) === false) {\n                shouldTerminate = false;\n              }\n            }\n          }\n\n          if (shouldTerminate) {\n            if (onResponderTerminate != null) {\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n              onResponderTerminate(responderEvent);\n            }\n\n            changeCurrentResponder(emptyResponder);\n            isEmulatingMouseEvents = false;\n            trackedTouchCount = 0;\n          }\n        }\n      }\n  }\n}\n/**\n * Walk the event path to/from the target node. At each node, stop and call the\n * relevant \"shouldSet\" functions for the given event type. If any of those functions\n * call \"stopPropagation\" on the event, stop searching for a responder.\n */\n\n\nfunction findWantsResponder(eventPaths, domEvent, responderEvent) {\n  var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type]; // for Flow\n\n  if (shouldSetCallbacks != null) {\n    var idPath = eventPaths.idPath,\n        nodePath = eventPaths.nodePath;\n    var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n    var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n    var bubbles = shouldSetCallbacks[2].bubbles;\n\n    var check = function check(id, node, callbackName) {\n      var config = getResponderConfig(id);\n      var shouldSetCallback = config[callbackName];\n\n      if (shouldSetCallback != null) {\n        responderEvent.currentTarget = node;\n\n        if (shouldSetCallback(responderEvent) === true) {\n          // Start the path from the potential responder\n          var prunedIdPath = idPath.slice(idPath.indexOf(id));\n          return {\n            id: id,\n            node: node,\n            idPath: prunedIdPath\n          };\n        }\n      }\n    }; // capture\n\n\n    for (var i = idPath.length - 1; i >= 0; i--) {\n      var id = idPath[i];\n      var node = nodePath[i];\n      var result = check(id, node, shouldSetCallbackCaptureName);\n\n      if (result != null) {\n        return result;\n      }\n\n      if (responderEvent.isPropagationStopped() === true) {\n        return;\n      }\n    } // bubble\n\n\n    if (bubbles) {\n      for (var _i = 0; _i < idPath.length; _i++) {\n        var _id = idPath[_i];\n        var _node = nodePath[_i];\n\n        var _result = check(_id, _node, shouldSetCallbackBubbleName);\n\n        if (_result != null) {\n          return _result;\n        }\n\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n    } else {\n      var _id2 = idPath[0];\n      var _node2 = nodePath[0];\n      var target = domEvent.target;\n\n      if (target === _node2) {\n        return check(_id2, _node2, shouldSetCallbackBubbleName);\n      }\n    }\n  }\n}\n/**\n * Attempt to transfer the responder.\n */\n\n\nfunction attemptTransfer(responderEvent, wantsResponder) {\n  var _currentResponder2 = currentResponder,\n      currentId = _currentResponder2.id,\n      currentNode = _currentResponder2.node;\n  var id = wantsResponder.id,\n      node = wantsResponder.node;\n\n  var _getResponderConfig2 = getResponderConfig(id),\n      onResponderGrant = _getResponderConfig2.onResponderGrant,\n      onResponderReject = _getResponderConfig2.onResponderReject;\n\n  responderEvent.bubbles = false;\n  responderEvent.cancelable = false;\n  responderEvent.currentTarget = node; // Set responder\n\n  if (currentId == null) {\n    if (onResponderGrant != null) {\n      responderEvent.currentTarget = node;\n      responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n      onResponderGrant(responderEvent);\n    }\n\n    changeCurrentResponder(wantsResponder);\n  } // Negotiate with current responder\n  else {\n      var _getResponderConfig3 = getResponderConfig(currentId),\n          onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n          onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n\n      var allowTransfer = true;\n\n      if (onResponderTerminationRequest != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n\n        if (onResponderTerminationRequest(responderEvent) === false) {\n          allowTransfer = false;\n        }\n      }\n\n      if (allowTransfer) {\n        // Terminate existing responder\n        if (onResponderTerminate != null) {\n          responderEvent.currentTarget = currentNode;\n          responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n          onResponderTerminate(responderEvent);\n        } // Grant next responder\n\n\n        if (onResponderGrant != null) {\n          responderEvent.currentTarget = node;\n          responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n          onResponderGrant(responderEvent);\n        }\n\n        changeCurrentResponder(wantsResponder);\n      } else {\n        // Reject responder request\n        if (onResponderReject != null) {\n          responderEvent.currentTarget = node;\n          responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n          onResponderReject(responderEvent);\n        }\n      }\n    }\n}\n/* ------------ PUBLIC API ------------ */\n\n/**\n * Attach Listeners\n *\n * Use native events as ReactDOM doesn't have a non-plugin API to implement\n * this system.\n */\n\n\nvar documentEventsCapturePhase = ['blur', 'scroll'];\nvar documentEventsBubblePhase = [// mouse\n'mousedown', 'mousemove', 'mouseup', 'dragstart', // touch\n'touchstart', 'touchmove', 'touchend', 'touchcancel', // other\n'contextmenu', 'select', 'selectionchange'];\n\nfunction attachListeners() {\n  if (_ExecutionEnvironment.canUseDOM && window.__reactResponderSystemActive == null) {\n    window.addEventListener('blur', eventListener);\n    documentEventsBubblePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener);\n    });\n    documentEventsCapturePhase.forEach(function (eventType) {\n      document.addEventListener(eventType, eventListener, true);\n    });\n    window.__reactResponderSystemActive = true;\n  }\n}\n/**\n * Register a node with the ResponderSystem.\n */\n\n\nfunction addNode(id, node, config) {\n  (0, _utils.setResponderId)(node, id);\n  responderListenersMap.set(id, config);\n}\n/**\n * Unregister a node with the ResponderSystem.\n */\n\n\nfunction removeNode(id) {\n  if (currentResponder.id === id) {\n    terminateResponder();\n  }\n\n  if (responderListenersMap.has(id)) {\n    responderListenersMap.delete(id);\n  }\n}\n/**\n * Allow the current responder to be terminated from within components to support\n * more complex requirements, such as use with other React libraries for working\n * with scroll views, input views, etc.\n */\n\n\nfunction terminateResponder() {\n  var _currentResponder3 = currentResponder,\n      id = _currentResponder3.id,\n      node = _currentResponder3.node;\n\n  if (id != null && node != null) {\n    var _getResponderConfig4 = getResponderConfig(id),\n        onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n\n    if (onResponderTerminate != null) {\n      var event = (0, _createResponderEvent.default)({});\n      event.currentTarget = node;\n      onResponderTerminate(event);\n    }\n\n    changeCurrentResponder(emptyResponder);\n  }\n\n  isEmulatingMouseEvents = false;\n  trackedTouchCount = 0;\n}\n/**\n * Allow unit tests to inspect the current responder in the system.\n * FOR TESTING ONLY.\n */\n\n\nfunction getResponderNode() {\n  return currentResponder.node;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}