{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";import _createClass from \"@babel/runtime/helpers/createClass\";import _inherits from \"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";var _excluded = [\"name\", \"size\", \"color\", \"style\", \"children\"];import _regeneratorRuntime from \"@babel/runtime/regenerator\";function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\nNativeModules,\nPlatform,\nPixelRatio,\nprocessColor,\nText } from \"./react-native\";\n\n\nimport ensureNativeModuleAvailable from \"./ensure-native-module-available\";\nimport createIconSourceCache from \"./create-icon-source-cache\";\nimport createIconButtonComponent from \"./icon-button\";\n\nexport var NativeIconAPI =\nNativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport var DEFAULT_ICON_SIZE = 12;\nexport var DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\nglyphMap,\nfontFamily,\nfontFile,\nfontStyle)\n{\n\n  var fontBasename = fontFile ?\n  fontFile.replace(/\\.(otf|ttf)$/, '') :\n  fontFamily;\n\n  var fontReference = Platform.select({\n    windows: \"/Assets/\" + fontFile + \"#\" + fontFamily,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily });\n\n\n  var IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));var\n\n  Icon = function (_PureComponent) {_inherits(Icon, _PureComponent);var _super = _createSuper(Icon);function Icon() {var _this;_classCallCheck(this, Icon);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _super.call.apply(_super, [this].concat(args));_this.\n      root = null;_this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      handleRef = function (ref) {\n        _this.root = ref;\n      };return _this;}_createClass(Icon, [{ key: \"setNativeProps\", value: function setNativeProps(nativeProps) {if (this.root) {this.root.setNativeProps(nativeProps);}} }, { key: \"render\", value:\n\n      function render() {\n        var _this$props = this.props,name = _this$props.name,size = _this$props.size,color = _this$props.color,style = _this$props.style,children = _this$props.children,props = _objectWithoutProperties(_this$props, _excluded);\n\n        var glyph = name ? glyphMap[name] || '?' : '';\n        if (typeof glyph === 'number') {\n          glyph = String.fromCodePoint(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color };\n\n\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal' };\n\n\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n\n        return (\n          React.createElement(Text, props,\n          glyph,\n          children));\n\n\n      } }]);return Icon;}(PureComponent);Icon.propTypes = { allowFontScaling: PropTypes.bool, name: IconNamePropType, size: PropTypes.number, color: PropTypes.any, children: PropTypes.node, style: PropTypes.any };Icon.defaultProps = { size: DEFAULT_ICON_SIZE, allowFontScaling: false };\n\n\n  var imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    var glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n  name)\n\n\n  {var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n\n    var glyph = resolveGlyph(name);\n    var processedColor = processColor(color);\n    var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      var imagePath = NativeIconAPI.getImageForFontSync(\n      fontReference,\n      glyph,\n      size,\n      processedColor);\n\n      var value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  function getImageSource(\n  name) {var size,color,glyph,processedColor,cacheKey,imagePath,value,_args = arguments;return _regeneratorRuntime.async(function getImageSource$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:\n            size = _args.length > 1 && _args[1] !== undefined ? _args[1] : DEFAULT_ICON_SIZE;\n            color = _args.length > 2 && _args[2] !== undefined ? _args[2] : DEFAULT_ICON_COLOR;\n\n            ensureNativeModuleAvailable();\n\n            glyph = resolveGlyph(name);\n            processedColor = processColor(color);\n            cacheKey = glyph + \":\" + size + \":\" + processedColor;if (!\n\n            imageSourceCache.has(cacheKey)) {_context.next = 8;break;}return _context.abrupt(\"return\",\n            imageSourceCache.get(cacheKey));case 8:_context.prev = 8;_context.next = 11;return _regeneratorRuntime.awrap(\n\n\n            NativeIconAPI.getImageForFont(\n            fontReference,\n            glyph,\n            size,\n            processedColor));case 11:imagePath = _context.sent;\n\n            value = { uri: imagePath, scale: PixelRatio.get() };\n            imageSourceCache.setValue(cacheKey, value);return _context.abrupt(\"return\",\n            value);case 17:_context.prev = 17;_context.t0 = _context[\"catch\"](8);\n\n            imageSourceCache.setError(cacheKey, _context.t0);throw _context.t0;case 21:case \"end\":return _context.stop();}}}, null, null, [[8, 17]], Promise);}\n\n\n\n\n  function loadFont() {var file,_args2 = arguments;return _regeneratorRuntime.async(function loadFont$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:file = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : fontFile;if (!(\n            Platform.OS === 'ios')) {_context2.next = 7;break;}\n            ensureNativeModuleAvailable();if (\n            file) {_context2.next = 5;break;}throw (\n              new Error('Unable to load font, because no file was specified. '));case 5:_context2.next = 7;return _regeneratorRuntime.awrap(\n\n            NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.'))));case 7:case \"end\":return _context2.stop();}}}, null, null, null, Promise);}\n\n\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n\n;\nvar _a, _b;\n\n\n\nif (typeof self !== 'undefined' &&\n\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n\n\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    });\n\n\n    module.hot.accept();\n\n\n\n    if (prevExports !== null) {\n\n\n\n\n\n\n\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else\n      {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else\n  {\n\n\n\n\n    var isNoLongerABoundary = prevExports !== null;\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["D:/workbridge/mProjects/GlobalNewsApp/global_news_rn/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"names":["NativeIconAPI","NativeModules","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","fontBasename","fontFile","fontReference","Platform","windows","android","web","default","IconNamePropType","PropTypes","Object","Icon","allowFontScaling","name","size","color","children","style","props","glyph","glyphMap","String","styleDefaults","fontSize","styleOverrides","fontFamily","fontWeight","fontStyle","imageSourceCache","createIconSourceCache","ensureNativeModuleAvailable","resolveGlyph","processedColor","processColor","cacheKey","imagePath","value","uri","scale","PixelRatio","file","createIconButtonComponent"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}