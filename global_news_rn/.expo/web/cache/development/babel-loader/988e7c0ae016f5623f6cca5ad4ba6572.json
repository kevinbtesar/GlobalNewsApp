{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _EmitterSubscription = _interopRequireDefault(require(\"./_EmitterSubscription\"));\n\nvar _EventSubscriptionVendor = _interopRequireDefault(require(\"./_EventSubscriptionVendor\"));\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n\n\n\n\n\n\n\n\n\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar EventEmitter = function () {\n\n\n\n\n\n\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new _EventSubscriptionVendor.default();\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType,\n  listener, context) {\n    return this._subscriber.addSubscription(eventType, new _EmitterSubscription.default(this, this._subscriber, listener, context));\n  };\n\n\n\n\n\n\n\n\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  };\n\n\n\n\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    (0, _invariant.default)(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  };\n\n\n\n\n\n\n\n\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ?\n\n\n\n    subscriptions.filter(sparseFilterPredicate).length : 0;\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  };\n\n\n\n\n\n  _proto.removeListener = function removeListener(eventType,\n  listener) {\n    console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i];\n\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nvar _default = EventEmitter;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"names":["exports","__esModule","default","_invariant","_interopRequireDefault","require","_EmitterSubscription","_EventSubscriptionVendor","obj","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","_proto","prototype","addListener","eventType","listener","context","addSubscription","removeAllListeners","removeAllSubscriptions","removeSubscription","subscription","emitter","listenerCount","subscriptions","getSubscriptionsForType","filter","length","emit","_len","arguments","args","Array","_key","i","l","apply","removeListener","console","error","remove","_default","module"],"sources":["D:/workbridge/mProjects/GlobalNewsApp/global_news_rn/node_modules/react-native-web/dist/cjs/vendor/react-native/emitter/_EventEmitter.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"fbjs/lib/invariant\"));\n\nvar _EmitterSubscription = _interopRequireDefault(require(\"./_EmitterSubscription\"));\n\nvar _EventSubscriptionVendor = _interopRequireDefault(require(\"./_EventSubscriptionVendor\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nvar EventEmitter = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new _EventSubscriptionVendor.default();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener, context) {\n    return this._subscriber.addSubscription(eventType, new _EmitterSubscription.default(this, this._subscriber, listener, context));\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    (0, _invariant.default)(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n  ;\n\n  _proto.listenerCount = function listenerCount(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    subscriptions.filter(sparseFilterPredicate).length : 0;\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener) {\n    console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nvar _default = EventEmitter;\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAvC;;AAEA,IAAIC,oBAAoB,GAAGF,sBAAsB,CAACC,OAAO,0BAAR,CAAjD;;AAEA,IAAIE,wBAAwB,GAAGH,sBAAsB,CAACC,OAAO,8BAAR,CAArD;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC,CAAE,OAAOA,GAAG,IAAIA,GAAG,CAACP,UAAX,GAAwBO,GAAxB,GAA8B,EAAEN,OAAO,EAAEM,GAAX,EAArC,CAAwD;;;;;;;;;;;;AAY/F,IAAIC,qBAAqB,GAAG,SAASA,qBAAT,GAAiC;EAC3D,OAAO,IAAP;AACD,CAFD;;;;;;;;;;;;;;;AAiBA,IAAIC,YAAY,GAAgB,YAAY;;;;;;;EAO1C,SAASA,YAAT,CAAsBC,UAAtB,EAAkC;IAChC,KAAKC,WAAL,GAAmBD,UAAU,IAAI,IAAIJ,wBAAwB,CAACL,OAA7B,EAAjC;EACD;;;;;;;;;;;;;;;;;EAiBD,IAAIW,MAAM,GAAGH,YAAY,CAACI,SAA1B;;EAEAD,MAAM,CAACE,WAAP,GAAqB,SAASA,WAAT,CAAqBC,SAArB;EACrBC,QADqB,EACXC,OADW,EACF;IACjB,OAAO,KAAKN,WAAL,CAAiBO,eAAjB,CAAiCH,SAAjC,EAA4C,IAAIV,oBAAoB,CAACJ,OAAzB,CAAiC,IAAjC,EAAuC,KAAKU,WAA5C,EAAyDK,QAAzD,EAAmEC,OAAnE,CAA5C,CAAP;EACD,CAHD;;;;;;;;;;EAaAL,MAAM,CAACO,kBAAP,GAA4B,SAASA,kBAAT,CAA4BJ,SAA5B,EAAuC;IACjE,KAAKJ,WAAL,CAAiBS,sBAAjB,CAAwCL,SAAxC;EACD,CAFD;;;;;;EAQAH,MAAM,CAACS,kBAAP,GAA4B,SAASA,kBAAT,CAA4BC,YAA5B,EAA0C;IACpE,CAAC,GAAGpB,UAAU,CAACD,OAAf,EAAwBqB,YAAY,CAACC,OAAb,KAAyB,IAAjD,EAAuD,+CAAvD;;IAEA,KAAKZ,WAAL,CAAiBU,kBAAjB,CAAoCC,YAApC;EACD,CAJD;;;;;;;;;;EAcAV,MAAM,CAACY,aAAP,GAAuB,SAASA,aAAT,CAAuBT,SAAvB,EAAkC;IACvD,IAAIU,aAAa,GAAG,KAAKd,WAAL,CAAiBe,uBAAjB,CAAyCX,SAAzC,CAApB;;IAEA,OAAOU,aAAa;;;;IAIpBA,aAAa,CAACE,MAAd,CAAqBnB,qBAArB,EAA4CoB,MAJxB,GAIiC,CAJrD;EAKD,CARD;;;;;;;;;;;;;;;;;EAyBAhB,MAAM,CAACiB,IAAP,GAAc,SAASA,IAAT,CAAcd,SAAd,EAAyB;IACrC,IAAIU,aAAa,GAAG,KAAKd,WAAL,CAAiBe,uBAAjB,CAAyCX,SAAzC,CAApB;;IAEA,IAAIU,aAAJ,EAAmB;MACjB,KAAK,IAAIK,IAAI,GAAGC,SAAS,CAACH,MAArB,EAA6BI,IAAI,GAAG,IAAIC,KAAJ,CAAUH,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEI,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGJ,IAA9F,EAAoGI,IAAI,EAAxG,EAA4G;QAC1GF,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBH,SAAS,CAACG,IAAD,CAA1B;MACD;;MAED,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGX,aAAa,CAACG,MAAlC,EAA0CO,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;QACpD,IAAIb,YAAY,GAAGG,aAAa,CAACU,CAAD,CAAhC;;QAEA,IAAIb,YAAY,IAAIA,YAAY,CAACN,QAAjC,EAA2C;UACzCM,YAAY,CAACN,QAAb,CAAsBqB,KAAtB,CAA4Bf,YAAY,CAACL,OAAzC,EAAkDe,IAAlD;QACD;MACF;IACF;EACF,CAhBD;;;;;;EAsBApB,MAAM,CAAC0B,cAAP,GAAwB,SAASA,cAAT,CAAwBvB,SAAxB;EACxBC,QADwB,EACd;IACRuB,OAAO,CAACC,KAAR,CAAc,kCAAkCzB,SAAlC,GAA8C,2BAA9C,GAA4E,gEAA5E,GAA+I,yCAA7J;;IAEA,IAAIU,aAAa,GAAG,KAAKd,WAAL,CAAiBe,uBAAjB,CAAyCX,SAAzC,CAApB;;IAEA,IAAIU,aAAJ,EAAmB;MACjB,KAAK,IAAIU,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGX,aAAa,CAACG,MAAlC,EAA0CO,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;QACpD,IAAIb,YAAY,GAAGG,aAAa,CAACU,CAAD,CAAhC;;;QAGA,IAAIb,YAAY,IAAIA,YAAY,CAACN,QAAb,KAA0BA,QAA9C,EAAwD;UACtDM,YAAY,CAACmB,MAAb;QACD;MACF;IACF;EACF,CAhBD;;EAkBA,OAAOhC,YAAP;AACD,CAjI+B,EAAhC;;AAmIA,IAAIiC,QAAQ,GAAGjC,YAAf;AACAV,OAAO,CAACE,OAAR,GAAkByC,QAAlB;AACAC,MAAM,CAAC5C,OAAP,GAAiBA,OAAO,CAACE,OAAzB"},"metadata":{},"sourceType":"script"}